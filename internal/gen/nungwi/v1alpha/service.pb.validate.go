// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: nungwi/v1alpha/service.proto

package nungwiv1alpha

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on WriteSchemaRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WriteSchemaRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WriteSchemaRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WriteSchemaRequestMultiError, or nil if none found.
func (m *WriteSchemaRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *WriteSchemaRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]string, len(m.GetNamespaces()))
		i := 0
		for key := range m.GetNamespaces() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetNamespaces()[key]
			_ = val

			// no validation rules for Namespaces[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, WriteSchemaRequestValidationError{
							field:  fmt.Sprintf("Namespaces[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, WriteSchemaRequestValidationError{
							field:  fmt.Sprintf("Namespaces[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return WriteSchemaRequestValidationError{
						field:  fmt.Sprintf("Namespaces[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return WriteSchemaRequestMultiError(errors)
	}

	return nil
}

// WriteSchemaRequestMultiError is an error wrapping multiple validation errors
// returned by WriteSchemaRequest.ValidateAll() if the designated constraints
// aren't met.
type WriteSchemaRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WriteSchemaRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WriteSchemaRequestMultiError) AllErrors() []error { return m }

// WriteSchemaRequestValidationError is the validation error returned by
// WriteSchemaRequest.Validate if the designated constraints aren't met.
type WriteSchemaRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WriteSchemaRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WriteSchemaRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WriteSchemaRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WriteSchemaRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WriteSchemaRequestValidationError) ErrorName() string {
	return "WriteSchemaRequestValidationError"
}

// Error satisfies the builtin error interface
func (e WriteSchemaRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWriteSchemaRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WriteSchemaRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WriteSchemaRequestValidationError{}

// Validate checks the field values on WriteSchemaResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WriteSchemaResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WriteSchemaResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WriteSchemaResponseMultiError, or nil if none found.
func (m *WriteSchemaResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *WriteSchemaResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return WriteSchemaResponseMultiError(errors)
	}

	return nil
}

// WriteSchemaResponseMultiError is an error wrapping multiple validation
// errors returned by WriteSchemaResponse.ValidateAll() if the designated
// constraints aren't met.
type WriteSchemaResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WriteSchemaResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WriteSchemaResponseMultiError) AllErrors() []error { return m }

// WriteSchemaResponseValidationError is the validation error returned by
// WriteSchemaResponse.Validate if the designated constraints aren't met.
type WriteSchemaResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WriteSchemaResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WriteSchemaResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WriteSchemaResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WriteSchemaResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WriteSchemaResponseValidationError) ErrorName() string {
	return "WriteSchemaResponseValidationError"
}

// Error satisfies the builtin error interface
func (e WriteSchemaResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWriteSchemaResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WriteSchemaResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WriteSchemaResponseValidationError{}

// Validate checks the field values on GetSchemaRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetSchemaRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSchemaRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSchemaRequestMultiError, or nil if none found.
func (m *GetSchemaRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSchemaRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetSchemaRequestMultiError(errors)
	}

	return nil
}

// GetSchemaRequestMultiError is an error wrapping multiple validation errors
// returned by GetSchemaRequest.ValidateAll() if the designated constraints
// aren't met.
type GetSchemaRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSchemaRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSchemaRequestMultiError) AllErrors() []error { return m }

// GetSchemaRequestValidationError is the validation error returned by
// GetSchemaRequest.Validate if the designated constraints aren't met.
type GetSchemaRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSchemaRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSchemaRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSchemaRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSchemaRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSchemaRequestValidationError) ErrorName() string { return "GetSchemaRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetSchemaRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSchemaRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSchemaRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSchemaRequestValidationError{}

// Validate checks the field values on GetSchemaResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetSchemaResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSchemaResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSchemaResponseMultiError, or nil if none found.
func (m *GetSchemaResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSchemaResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]string, len(m.GetNamespaces()))
		i := 0
		for key := range m.GetNamespaces() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetNamespaces()[key]
			_ = val

			// no validation rules for Namespaces[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, GetSchemaResponseValidationError{
							field:  fmt.Sprintf("Namespaces[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, GetSchemaResponseValidationError{
							field:  fmt.Sprintf("Namespaces[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return GetSchemaResponseValidationError{
						field:  fmt.Sprintf("Namespaces[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return GetSchemaResponseMultiError(errors)
	}

	return nil
}

// GetSchemaResponseMultiError is an error wrapping multiple validation errors
// returned by GetSchemaResponse.ValidateAll() if the designated constraints
// aren't met.
type GetSchemaResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSchemaResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSchemaResponseMultiError) AllErrors() []error { return m }

// GetSchemaResponseValidationError is the validation error returned by
// GetSchemaResponse.Validate if the designated constraints aren't met.
type GetSchemaResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSchemaResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSchemaResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSchemaResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSchemaResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSchemaResponseValidationError) ErrorName() string {
	return "GetSchemaResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetSchemaResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSchemaResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSchemaResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSchemaResponseValidationError{}

// Validate checks the field values on DeleteSchemaRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteSchemaRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteSchemaRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteSchemaRequestMultiError, or nil if none found.
func (m *DeleteSchemaRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteSchemaRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteSchemaRequestMultiError(errors)
	}

	return nil
}

// DeleteSchemaRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteSchemaRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteSchemaRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteSchemaRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteSchemaRequestMultiError) AllErrors() []error { return m }

// DeleteSchemaRequestValidationError is the validation error returned by
// DeleteSchemaRequest.Validate if the designated constraints aren't met.
type DeleteSchemaRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteSchemaRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteSchemaRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteSchemaRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteSchemaRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteSchemaRequestValidationError) ErrorName() string {
	return "DeleteSchemaRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteSchemaRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteSchemaRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteSchemaRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteSchemaRequestValidationError{}

// Validate checks the field values on DeleteSchemaResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteSchemaResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteSchemaResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteSchemaResponseMultiError, or nil if none found.
func (m *DeleteSchemaResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteSchemaResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteSchemaResponseMultiError(errors)
	}

	return nil
}

// DeleteSchemaResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteSchemaResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteSchemaResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteSchemaResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteSchemaResponseMultiError) AllErrors() []error { return m }

// DeleteSchemaResponseValidationError is the validation error returned by
// DeleteSchemaResponse.Validate if the designated constraints aren't met.
type DeleteSchemaResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteSchemaResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteSchemaResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteSchemaResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteSchemaResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteSchemaResponseValidationError) ErrorName() string {
	return "DeleteSchemaResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteSchemaResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteSchemaResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteSchemaResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteSchemaResponseValidationError{}

// Validate checks the field values on AddTuplesRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddTuplesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddTuplesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddTuplesRequestMultiError, or nil if none found.
func (m *AddTuplesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddTuplesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTuples() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddTuplesRequestValidationError{
						field:  fmt.Sprintf("Tuples[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddTuplesRequestValidationError{
						field:  fmt.Sprintf("Tuples[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddTuplesRequestValidationError{
					field:  fmt.Sprintf("Tuples[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AddTuplesRequestMultiError(errors)
	}

	return nil
}

// AddTuplesRequestMultiError is an error wrapping multiple validation errors
// returned by AddTuplesRequest.ValidateAll() if the designated constraints
// aren't met.
type AddTuplesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddTuplesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddTuplesRequestMultiError) AllErrors() []error { return m }

// AddTuplesRequestValidationError is the validation error returned by
// AddTuplesRequest.Validate if the designated constraints aren't met.
type AddTuplesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddTuplesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddTuplesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddTuplesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddTuplesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddTuplesRequestValidationError) ErrorName() string { return "AddTuplesRequestValidationError" }

// Error satisfies the builtin error interface
func (e AddTuplesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddTuplesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddTuplesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddTuplesRequestValidationError{}

// Validate checks the field values on AddTuplesResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddTuplesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddTuplesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddTuplesResponseMultiError, or nil if none found.
func (m *AddTuplesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddTuplesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddTuplesResponseMultiError(errors)
	}

	return nil
}

// AddTuplesResponseMultiError is an error wrapping multiple validation errors
// returned by AddTuplesResponse.ValidateAll() if the designated constraints
// aren't met.
type AddTuplesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddTuplesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddTuplesResponseMultiError) AllErrors() []error { return m }

// AddTuplesResponseValidationError is the validation error returned by
// AddTuplesResponse.Validate if the designated constraints aren't met.
type AddTuplesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddTuplesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddTuplesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddTuplesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddTuplesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddTuplesResponseValidationError) ErrorName() string {
	return "AddTuplesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddTuplesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddTuplesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddTuplesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddTuplesResponseValidationError{}

// Validate checks the field values on DeleteTuplesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteTuplesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTuplesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteTuplesRequestMultiError, or nil if none found.
func (m *DeleteTuplesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTuplesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTuples() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DeleteTuplesRequestValidationError{
						field:  fmt.Sprintf("Tuples[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DeleteTuplesRequestValidationError{
						field:  fmt.Sprintf("Tuples[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DeleteTuplesRequestValidationError{
					field:  fmt.Sprintf("Tuples[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DeleteTuplesRequestMultiError(errors)
	}

	return nil
}

// DeleteTuplesRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteTuplesRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteTuplesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTuplesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTuplesRequestMultiError) AllErrors() []error { return m }

// DeleteTuplesRequestValidationError is the validation error returned by
// DeleteTuplesRequest.Validate if the designated constraints aren't met.
type DeleteTuplesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTuplesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTuplesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTuplesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTuplesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTuplesRequestValidationError) ErrorName() string {
	return "DeleteTuplesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTuplesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTuplesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTuplesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTuplesRequestValidationError{}

// Validate checks the field values on DeleteTuplesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteTuplesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTuplesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteTuplesResponseMultiError, or nil if none found.
func (m *DeleteTuplesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTuplesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteTuplesResponseMultiError(errors)
	}

	return nil
}

// DeleteTuplesResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteTuplesResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteTuplesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTuplesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTuplesResponseMultiError) AllErrors() []error { return m }

// DeleteTuplesResponseValidationError is the validation error returned by
// DeleteTuplesResponse.Validate if the designated constraints aren't met.
type DeleteTuplesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTuplesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTuplesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTuplesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTuplesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTuplesResponseValidationError) ErrorName() string {
	return "DeleteTuplesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTuplesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTuplesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTuplesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTuplesResponseValidationError{}

// Validate checks the field values on ChecksRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ChecksRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChecksRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ChecksRequestMultiError, or
// nil if none found.
func (m *ChecksRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ChecksRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTuples() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChecksRequestValidationError{
						field:  fmt.Sprintf("Tuples[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChecksRequestValidationError{
						field:  fmt.Sprintf("Tuples[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChecksRequestValidationError{
					field:  fmt.Sprintf("Tuples[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ChecksRequestMultiError(errors)
	}

	return nil
}

// ChecksRequestMultiError is an error wrapping multiple validation errors
// returned by ChecksRequest.ValidateAll() if the designated constraints
// aren't met.
type ChecksRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChecksRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChecksRequestMultiError) AllErrors() []error { return m }

// ChecksRequestValidationError is the validation error returned by
// ChecksRequest.Validate if the designated constraints aren't met.
type ChecksRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChecksRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChecksRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChecksRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChecksRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChecksRequestValidationError) ErrorName() string { return "ChecksRequestValidationError" }

// Error satisfies the builtin error interface
func (e ChecksRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChecksRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChecksRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChecksRequestValidationError{}

// Validate checks the field values on ChecksResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ChecksResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChecksResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ChecksResponseMultiError,
// or nil if none found.
func (m *ChecksResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ChecksResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ChecksResponseMultiError(errors)
	}

	return nil
}

// ChecksResponseMultiError is an error wrapping multiple validation errors
// returned by ChecksResponse.ValidateAll() if the designated constraints
// aren't met.
type ChecksResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChecksResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChecksResponseMultiError) AllErrors() []error { return m }

// ChecksResponseValidationError is the validation error returned by
// ChecksResponse.Validate if the designated constraints aren't met.
type ChecksResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChecksResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChecksResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChecksResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChecksResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChecksResponseValidationError) ErrorName() string { return "ChecksResponseValidationError" }

// Error satisfies the builtin error interface
func (e ChecksResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChecksResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChecksResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChecksResponseValidationError{}

// Validate checks the field values on Tuple with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Tuple) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Tuple with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in TupleMultiError, or nil if none found.
func (m *Tuple) ValidateAll() error {
	return m.validate(true)
}

func (m *Tuple) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetObject() == nil {
		err := TupleValidationError{
			field:  "Object",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetObject()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TupleValidationError{
					field:  "Object",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TupleValidationError{
					field:  "Object",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetObject()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TupleValidationError{
				field:  "Object",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if l := utf8.RuneCountInString(m.GetRelation()); l < 1 || l > 100 {
		err := TupleValidationError{
			field:  "Relation",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetUser() == nil {
		err := TupleValidationError{
			field:  "User",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TupleValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TupleValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TupleValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TupleMultiError(errors)
	}

	return nil
}

// TupleMultiError is an error wrapping multiple validation errors returned by
// Tuple.ValidateAll() if the designated constraints aren't met.
type TupleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TupleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TupleMultiError) AllErrors() []error { return m }

// TupleValidationError is the validation error returned by Tuple.Validate if
// the designated constraints aren't met.
type TupleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TupleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TupleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TupleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TupleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TupleValidationError) ErrorName() string { return "TupleValidationError" }

// Error satisfies the builtin error interface
func (e TupleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTuple.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TupleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TupleValidationError{}

// Validate checks the field values on Object with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Object) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Object with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ObjectMultiError, or nil if none found.
func (m *Object) ValidateAll() error {
	return m.validate(true)
}

func (m *Object) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetNamespace()); l < 1 || l > 100 {
		err := ObjectValidationError{
			field:  "Namespace",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetId()); l < 1 || l > 100 {
		err := ObjectValidationError{
			field:  "Id",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ObjectMultiError(errors)
	}

	return nil
}

// ObjectMultiError is an error wrapping multiple validation errors returned by
// Object.ValidateAll() if the designated constraints aren't met.
type ObjectMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ObjectMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ObjectMultiError) AllErrors() []error { return m }

// ObjectValidationError is the validation error returned by Object.Validate if
// the designated constraints aren't met.
type ObjectValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ObjectValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ObjectValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ObjectValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ObjectValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ObjectValidationError) ErrorName() string { return "ObjectValidationError" }

// Error satisfies the builtin error interface
func (e ObjectValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sObject.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ObjectValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ObjectValidationError{}

// Validate checks the field values on User with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *User) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on User with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in UserMultiError, or nil if none found.
func (m *User) ValidateAll() error {
	return m.validate(true)
}

func (m *User) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.Ref.(type) {

	case *User_Id:

		if l := utf8.RuneCountInString(m.GetId()); l < 1 || l > 100 {
			err := UserValidationError{
				field:  "Id",
				reason: "value length must be between 1 and 100 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	case *User_Object:

		if all {
			switch v := interface{}(m.GetObject()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UserValidationError{
						field:  "Object",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UserValidationError{
						field:  "Object",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetObject()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UserValidationError{
					field:  "Object",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *User_Userset:

		if all {
			switch v := interface{}(m.GetUserset()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UserValidationError{
						field:  "Userset",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UserValidationError{
						field:  "Userset",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUserset()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UserValidationError{
					field:  "Userset",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UserMultiError(errors)
	}

	return nil
}

// UserMultiError is an error wrapping multiple validation errors returned by
// User.ValidateAll() if the designated constraints aren't met.
type UserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserMultiError) AllErrors() []error { return m }

// UserValidationError is the validation error returned by User.Validate if the
// designated constraints aren't met.
type UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserValidationError) ErrorName() string { return "UserValidationError" }

// Error satisfies the builtin error interface
func (e UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserValidationError{}

// Validate checks the field values on Userset with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Userset) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Userset with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in UsersetMultiError, or nil if none found.
func (m *Userset) ValidateAll() error {
	return m.validate(true)
}

func (m *Userset) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetObject() == nil {
		err := UsersetValidationError{
			field:  "Object",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetObject()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UsersetValidationError{
					field:  "Object",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UsersetValidationError{
					field:  "Object",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetObject()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UsersetValidationError{
				field:  "Object",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Relation

	if len(errors) > 0 {
		return UsersetMultiError(errors)
	}

	return nil
}

// UsersetMultiError is an error wrapping multiple validation errors returned
// by Userset.ValidateAll() if the designated constraints aren't met.
type UsersetMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UsersetMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UsersetMultiError) AllErrors() []error { return m }

// UsersetValidationError is the validation error returned by Userset.Validate
// if the designated constraints aren't met.
type UsersetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UsersetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UsersetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UsersetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UsersetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UsersetValidationError) ErrorName() string { return "UsersetValidationError" }

// Error satisfies the builtin error interface
func (e UsersetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserset.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UsersetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UsersetValidationError{}

// Validate checks the field values on Namespace with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Namespace) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Namespace with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NamespaceMultiError, or nil
// if none found.
func (m *Namespace) ValidateAll() error {
	return m.validate(true)
}

func (m *Namespace) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	{
		sorted_keys := make([]string, len(m.GetRelations()))
		i := 0
		for key := range m.GetRelations() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetRelations()[key]
			_ = val

			// no validation rules for Relations[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, NamespaceValidationError{
							field:  fmt.Sprintf("Relations[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, NamespaceValidationError{
							field:  fmt.Sprintf("Relations[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return NamespaceValidationError{
						field:  fmt.Sprintf("Relations[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return NamespaceMultiError(errors)
	}

	return nil
}

// NamespaceMultiError is an error wrapping multiple validation errors returned
// by Namespace.ValidateAll() if the designated constraints aren't met.
type NamespaceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NamespaceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NamespaceMultiError) AllErrors() []error { return m }

// NamespaceValidationError is the validation error returned by
// Namespace.Validate if the designated constraints aren't met.
type NamespaceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NamespaceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NamespaceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NamespaceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NamespaceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NamespaceValidationError) ErrorName() string { return "NamespaceValidationError" }

// Error satisfies the builtin error interface
func (e NamespaceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNamespace.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NamespaceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NamespaceValidationError{}

// Validate checks the field values on UsersetRewrite with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UsersetRewrite) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UsersetRewrite with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UsersetRewriteMultiError,
// or nil if none found.
func (m *UsersetRewrite) ValidateAll() error {
	return m.validate(true)
}

func (m *UsersetRewrite) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.Rewrite.(type) {

	case *UsersetRewrite_This:

		if all {
			switch v := interface{}(m.GetThis()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UsersetRewriteValidationError{
						field:  "This",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UsersetRewriteValidationError{
						field:  "This",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetThis()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UsersetRewriteValidationError{
					field:  "This",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *UsersetRewrite_ComputedUserset:

		if all {
			switch v := interface{}(m.GetComputedUserset()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UsersetRewriteValidationError{
						field:  "ComputedUserset",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UsersetRewriteValidationError{
						field:  "ComputedUserset",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetComputedUserset()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UsersetRewriteValidationError{
					field:  "ComputedUserset",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *UsersetRewrite_TupleToUserset:

		if all {
			switch v := interface{}(m.GetTupleToUserset()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UsersetRewriteValidationError{
						field:  "TupleToUserset",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UsersetRewriteValidationError{
						field:  "TupleToUserset",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTupleToUserset()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UsersetRewriteValidationError{
					field:  "TupleToUserset",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *UsersetRewrite_Union:

		if all {
			switch v := interface{}(m.GetUnion()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UsersetRewriteValidationError{
						field:  "Union",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UsersetRewriteValidationError{
						field:  "Union",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUnion()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UsersetRewriteValidationError{
					field:  "Union",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *UsersetRewrite_Intersection:

		if all {
			switch v := interface{}(m.GetIntersection()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UsersetRewriteValidationError{
						field:  "Intersection",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UsersetRewriteValidationError{
						field:  "Intersection",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetIntersection()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UsersetRewriteValidationError{
					field:  "Intersection",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *UsersetRewrite_Exclusion:

		if all {
			switch v := interface{}(m.GetExclusion()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UsersetRewriteValidationError{
						field:  "Exclusion",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UsersetRewriteValidationError{
						field:  "Exclusion",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetExclusion()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UsersetRewriteValidationError{
					field:  "Exclusion",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UsersetRewriteMultiError(errors)
	}

	return nil
}

// UsersetRewriteMultiError is an error wrapping multiple validation errors
// returned by UsersetRewrite.ValidateAll() if the designated constraints
// aren't met.
type UsersetRewriteMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UsersetRewriteMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UsersetRewriteMultiError) AllErrors() []error { return m }

// UsersetRewriteValidationError is the validation error returned by
// UsersetRewrite.Validate if the designated constraints aren't met.
type UsersetRewriteValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UsersetRewriteValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UsersetRewriteValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UsersetRewriteValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UsersetRewriteValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UsersetRewriteValidationError) ErrorName() string { return "UsersetRewriteValidationError" }

// Error satisfies the builtin error interface
func (e UsersetRewriteValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUsersetRewrite.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UsersetRewriteValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UsersetRewriteValidationError{}

// Validate checks the field values on This with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *This) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on This with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ThisMultiError, or nil if none found.
func (m *This) ValidateAll() error {
	return m.validate(true)
}

func (m *This) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ThisMultiError(errors)
	}

	return nil
}

// ThisMultiError is an error wrapping multiple validation errors returned by
// This.ValidateAll() if the designated constraints aren't met.
type ThisMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ThisMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ThisMultiError) AllErrors() []error { return m }

// ThisValidationError is the validation error returned by This.Validate if the
// designated constraints aren't met.
type ThisValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ThisValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ThisValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ThisValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ThisValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ThisValidationError) ErrorName() string { return "ThisValidationError" }

// Error satisfies the builtin error interface
func (e ThisValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sThis.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ThisValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ThisValidationError{}

// Validate checks the field values on ComputedUserset with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ComputedUserset) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ComputedUserset with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ComputedUsersetMultiError, or nil if none found.
func (m *ComputedUserset) ValidateAll() error {
	return m.validate(true)
}

func (m *ComputedUserset) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Relation

	if len(errors) > 0 {
		return ComputedUsersetMultiError(errors)
	}

	return nil
}

// ComputedUsersetMultiError is an error wrapping multiple validation errors
// returned by ComputedUserset.ValidateAll() if the designated constraints
// aren't met.
type ComputedUsersetMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ComputedUsersetMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ComputedUsersetMultiError) AllErrors() []error { return m }

// ComputedUsersetValidationError is the validation error returned by
// ComputedUserset.Validate if the designated constraints aren't met.
type ComputedUsersetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ComputedUsersetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ComputedUsersetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ComputedUsersetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ComputedUsersetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ComputedUsersetValidationError) ErrorName() string { return "ComputedUsersetValidationError" }

// Error satisfies the builtin error interface
func (e ComputedUsersetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sComputedUserset.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ComputedUsersetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ComputedUsersetValidationError{}

// Validate checks the field values on TupleToUserset with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TupleToUserset) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TupleToUserset with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TupleToUsersetMultiError,
// or nil if none found.
func (m *TupleToUserset) ValidateAll() error {
	return m.validate(true)
}

func (m *TupleToUserset) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Tupleset

	// no validation rules for ComputedUserset

	if len(errors) > 0 {
		return TupleToUsersetMultiError(errors)
	}

	return nil
}

// TupleToUsersetMultiError is an error wrapping multiple validation errors
// returned by TupleToUserset.ValidateAll() if the designated constraints
// aren't met.
type TupleToUsersetMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TupleToUsersetMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TupleToUsersetMultiError) AllErrors() []error { return m }

// TupleToUsersetValidationError is the validation error returned by
// TupleToUserset.Validate if the designated constraints aren't met.
type TupleToUsersetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TupleToUsersetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TupleToUsersetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TupleToUsersetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TupleToUsersetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TupleToUsersetValidationError) ErrorName() string { return "TupleToUsersetValidationError" }

// Error satisfies the builtin error interface
func (e TupleToUsersetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTupleToUserset.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TupleToUsersetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TupleToUsersetValidationError{}

// Validate checks the field values on Union with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Union) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Union with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in UnionMultiError, or nil if none found.
func (m *Union) ValidateAll() error {
	return m.validate(true)
}

func (m *Union) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetChildren() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UnionValidationError{
						field:  fmt.Sprintf("Children[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UnionValidationError{
						field:  fmt.Sprintf("Children[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UnionValidationError{
					field:  fmt.Sprintf("Children[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UnionMultiError(errors)
	}

	return nil
}

// UnionMultiError is an error wrapping multiple validation errors returned by
// Union.ValidateAll() if the designated constraints aren't met.
type UnionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnionMultiError) AllErrors() []error { return m }

// UnionValidationError is the validation error returned by Union.Validate if
// the designated constraints aren't met.
type UnionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnionValidationError) ErrorName() string { return "UnionValidationError" }

// Error satisfies the builtin error interface
func (e UnionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnion.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnionValidationError{}

// Validate checks the field values on Intersection with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Intersection) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Intersection with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IntersectionMultiError, or
// nil if none found.
func (m *Intersection) ValidateAll() error {
	return m.validate(true)
}

func (m *Intersection) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetChildren() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, IntersectionValidationError{
						field:  fmt.Sprintf("Children[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, IntersectionValidationError{
						field:  fmt.Sprintf("Children[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return IntersectionValidationError{
					field:  fmt.Sprintf("Children[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return IntersectionMultiError(errors)
	}

	return nil
}

// IntersectionMultiError is an error wrapping multiple validation errors
// returned by Intersection.ValidateAll() if the designated constraints aren't met.
type IntersectionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IntersectionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IntersectionMultiError) AllErrors() []error { return m }

// IntersectionValidationError is the validation error returned by
// Intersection.Validate if the designated constraints aren't met.
type IntersectionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IntersectionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IntersectionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IntersectionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IntersectionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IntersectionValidationError) ErrorName() string { return "IntersectionValidationError" }

// Error satisfies the builtin error interface
func (e IntersectionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIntersection.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IntersectionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IntersectionValidationError{}

// Validate checks the field values on Exclusion with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Exclusion) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Exclusion with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ExclusionMultiError, or nil
// if none found.
func (m *Exclusion) ValidateAll() error {
	return m.validate(true)
}

func (m *Exclusion) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMinuend()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExclusionValidationError{
					field:  "Minuend",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExclusionValidationError{
					field:  "Minuend",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMinuend()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExclusionValidationError{
				field:  "Minuend",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSubtrahend()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExclusionValidationError{
					field:  "Subtrahend",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExclusionValidationError{
					field:  "Subtrahend",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSubtrahend()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExclusionValidationError{
				field:  "Subtrahend",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ExclusionMultiError(errors)
	}

	return nil
}

// ExclusionMultiError is an error wrapping multiple validation errors returned
// by Exclusion.ValidateAll() if the designated constraints aren't met.
type ExclusionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExclusionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExclusionMultiError) AllErrors() []error { return m }

// ExclusionValidationError is the validation error returned by
// Exclusion.Validate if the designated constraints aren't met.
type ExclusionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExclusionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExclusionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExclusionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExclusionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExclusionValidationError) ErrorName() string { return "ExclusionValidationError" }

// Error satisfies the builtin error interface
func (e ExclusionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExclusion.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExclusionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExclusionValidationError{}

// Validate checks the field values on Namespaces with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Namespaces) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Namespaces with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NamespacesMultiError, or
// nil if none found.
func (m *Namespaces) ValidateAll() error {
	return m.validate(true)
}

func (m *Namespaces) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]string, len(m.GetNamespaces()))
		i := 0
		for key := range m.GetNamespaces() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetNamespaces()[key]
			_ = val

			// no validation rules for Namespaces[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, NamespacesValidationError{
							field:  fmt.Sprintf("Namespaces[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, NamespacesValidationError{
							field:  fmt.Sprintf("Namespaces[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return NamespacesValidationError{
						field:  fmt.Sprintf("Namespaces[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return NamespacesMultiError(errors)
	}

	return nil
}

// NamespacesMultiError is an error wrapping multiple validation errors
// returned by Namespaces.ValidateAll() if the designated constraints aren't met.
type NamespacesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NamespacesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NamespacesMultiError) AllErrors() []error { return m }

// NamespacesValidationError is the validation error returned by
// Namespaces.Validate if the designated constraints aren't met.
type NamespacesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NamespacesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NamespacesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NamespacesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NamespacesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NamespacesValidationError) ErrorName() string { return "NamespacesValidationError" }

// Error satisfies the builtin error interface
func (e NamespacesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNamespaces.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NamespacesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NamespacesValidationError{}

// Validate checks the field values on Tuples with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Tuples) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Tuples with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in TuplesMultiError, or nil if none found.
func (m *Tuples) ValidateAll() error {
	return m.validate(true)
}

func (m *Tuples) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTuples() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TuplesValidationError{
						field:  fmt.Sprintf("Tuples[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TuplesValidationError{
						field:  fmt.Sprintf("Tuples[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TuplesValidationError{
					field:  fmt.Sprintf("Tuples[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TuplesMultiError(errors)
	}

	return nil
}

// TuplesMultiError is an error wrapping multiple validation errors returned by
// Tuples.ValidateAll() if the designated constraints aren't met.
type TuplesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TuplesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TuplesMultiError) AllErrors() []error { return m }

// TuplesValidationError is the validation error returned by Tuples.Validate if
// the designated constraints aren't met.
type TuplesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TuplesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TuplesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TuplesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TuplesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TuplesValidationError) ErrorName() string { return "TuplesValidationError" }

// Error satisfies the builtin error interface
func (e TuplesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTuples.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TuplesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TuplesValidationError{}

// Validate checks the field values on Assertions with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Assertions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Assertions with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AssertionsMultiError, or
// nil if none found.
func (m *Assertions) ValidateAll() error {
	return m.validate(true)
}

func (m *Assertions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetAssertions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AssertionsValidationError{
						field:  fmt.Sprintf("Assertions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AssertionsValidationError{
						field:  fmt.Sprintf("Assertions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AssertionsValidationError{
					field:  fmt.Sprintf("Assertions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AssertionsMultiError(errors)
	}

	return nil
}

// AssertionsMultiError is an error wrapping multiple validation errors
// returned by Assertions.ValidateAll() if the designated constraints aren't met.
type AssertionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AssertionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AssertionsMultiError) AllErrors() []error { return m }

// AssertionsValidationError is the validation error returned by
// Assertions.Validate if the designated constraints aren't met.
type AssertionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AssertionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AssertionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AssertionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AssertionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AssertionsValidationError) ErrorName() string { return "AssertionsValidationError" }

// Error satisfies the builtin error interface
func (e AssertionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAssertions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AssertionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AssertionsValidationError{}

// Validate checks the field values on Assertion with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Assertion) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Assertion with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AssertionMultiError, or nil
// if none found.
func (m *Assertion) ValidateAll() error {
	return m.validate(true)
}

func (m *Assertion) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTuple()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AssertionValidationError{
					field:  "Tuple",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AssertionValidationError{
					field:  "Tuple",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTuple()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AssertionValidationError{
				field:  "Tuple",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Allowed

	if len(errors) > 0 {
		return AssertionMultiError(errors)
	}

	return nil
}

// AssertionMultiError is an error wrapping multiple validation errors returned
// by Assertion.ValidateAll() if the designated constraints aren't met.
type AssertionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AssertionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AssertionMultiError) AllErrors() []error { return m }

// AssertionValidationError is the validation error returned by
// Assertion.Validate if the designated constraints aren't met.
type AssertionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AssertionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AssertionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AssertionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AssertionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AssertionValidationError) ErrorName() string { return "AssertionValidationError" }

// Error satisfies the builtin error interface
func (e AssertionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAssertion.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AssertionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AssertionValidationError{}
