// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: nungwi/v1alpha/service.proto

package nungwiv1alpha

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on RelationConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RelationConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RelationConfig with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RelationConfigMultiError,
// or nil if none found.
func (m *RelationConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *RelationConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetNamespace()) > 256 {
		err := RelationConfigValidationError{
			field:  "Namespace",
			reason: "value length must be at most 256 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_RelationConfig_Namespace_Pattern.MatchString(m.GetNamespace()) {
		err := RelationConfigValidationError{
			field:  "Namespace",
			reason: "value does not match regex pattern \"^[a-z][-_a-zA-Z0-9]*$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetRelation()) > 256 {
		err := RelationConfigValidationError{
			field:  "Relation",
			reason: "value length must be at most 256 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_RelationConfig_Relation_Pattern.MatchString(m.GetRelation()) {
		err := RelationConfigValidationError{
			field:  "Relation",
			reason: "value does not match regex pattern \"^[a-z][-_a-zA-Z0-9]*$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetRewrite()) > 1024 {
		err := RelationConfigValidationError{
			field:  "Rewrite",
			reason: "value length must be at most 1024 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_RelationConfig_Rewrite_Pattern.MatchString(m.GetRewrite()) {
		err := RelationConfigValidationError{
			field:  "Rewrite",
			reason: "value does not match regex pattern \"^[a-z][-_a-zA-Z0-9(), ]*$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RelationConfigMultiError(errors)
	}

	return nil
}

// RelationConfigMultiError is an error wrapping multiple validation errors
// returned by RelationConfig.ValidateAll() if the designated constraints
// aren't met.
type RelationConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RelationConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RelationConfigMultiError) AllErrors() []error { return m }

// RelationConfigValidationError is the validation error returned by
// RelationConfig.Validate if the designated constraints aren't met.
type RelationConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RelationConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RelationConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RelationConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RelationConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RelationConfigValidationError) ErrorName() string { return "RelationConfigValidationError" }

// Error satisfies the builtin error interface
func (e RelationConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRelationConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RelationConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RelationConfigValidationError{}

var _RelationConfig_Namespace_Pattern = regexp.MustCompile("^[a-z][-_a-zA-Z0-9]*$")

var _RelationConfig_Relation_Pattern = regexp.MustCompile("^[a-z][-_a-zA-Z0-9]*$")

var _RelationConfig_Rewrite_Pattern = regexp.MustCompile("^[a-z][-_a-zA-Z0-9(), ]*$")

// Validate checks the field values on Tuple with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Tuple) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Tuple with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in TupleMultiError, or nil if none found.
func (m *Tuple) ValidateAll() error {
	return m.validate(true)
}

func (m *Tuple) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetNamespace()) > 256 {
		err := TupleValidationError{
			field:  "Namespace",
			reason: "value length must be at most 256 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_Tuple_Namespace_Pattern.MatchString(m.GetNamespace()) {
		err := TupleValidationError{
			field:  "Namespace",
			reason: "value does not match regex pattern \"^[a-z][-_a-zA-Z0-9]*$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetId()) > 256 {
		err := TupleValidationError{
			field:  "Id",
			reason: "value length must be at most 256 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_Tuple_Id_Pattern.MatchString(m.GetId()) {
		err := TupleValidationError{
			field:  "Id",
			reason: "value does not match regex pattern \"^[a-z0-9][-_a-zA-Z0-9]*$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetRelation()) > 256 {
		err := TupleValidationError{
			field:  "Relation",
			reason: "value length must be at most 256 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_Tuple_Relation_Pattern.MatchString(m.GetRelation()) {
		err := TupleValidationError{
			field:  "Relation",
			reason: "value does not match regex pattern \"^[a-z][-_a-zA-Z0-9]*$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetUser()) > 512 {
		err := TupleValidationError{
			field:  "User",
			reason: "value length must be at most 512 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_Tuple_User_Pattern.MatchString(m.GetUser()) {
		err := TupleValidationError{
			field:  "User",
			reason: "value does not match regex pattern \"^[a-z][-_a-zA-Z0-9(), ]*$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return TupleMultiError(errors)
	}

	return nil
}

// TupleMultiError is an error wrapping multiple validation errors returned by
// Tuple.ValidateAll() if the designated constraints aren't met.
type TupleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TupleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TupleMultiError) AllErrors() []error { return m }

// TupleValidationError is the validation error returned by Tuple.Validate if
// the designated constraints aren't met.
type TupleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TupleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TupleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TupleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TupleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TupleValidationError) ErrorName() string { return "TupleValidationError" }

// Error satisfies the builtin error interface
func (e TupleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTuple.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TupleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TupleValidationError{}

var _Tuple_Namespace_Pattern = regexp.MustCompile("^[a-z][-_a-zA-Z0-9]*$")

var _Tuple_Id_Pattern = regexp.MustCompile("^[a-z0-9][-_a-zA-Z0-9]*$")

var _Tuple_Relation_Pattern = regexp.MustCompile("^[a-z][-_a-zA-Z0-9]*$")

var _Tuple_User_Pattern = regexp.MustCompile("^[a-z][-_a-zA-Z0-9(), ]*$")

// Validate checks the field values on WriteSchemaRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WriteSchemaRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WriteSchemaRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WriteSchemaRequestMultiError, or nil if none found.
func (m *WriteSchemaRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *WriteSchemaRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetConfigs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, WriteSchemaRequestValidationError{
						field:  fmt.Sprintf("Configs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, WriteSchemaRequestValidationError{
						field:  fmt.Sprintf("Configs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WriteSchemaRequestValidationError{
					field:  fmt.Sprintf("Configs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return WriteSchemaRequestMultiError(errors)
	}

	return nil
}

// WriteSchemaRequestMultiError is an error wrapping multiple validation errors
// returned by WriteSchemaRequest.ValidateAll() if the designated constraints
// aren't met.
type WriteSchemaRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WriteSchemaRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WriteSchemaRequestMultiError) AllErrors() []error { return m }

// WriteSchemaRequestValidationError is the validation error returned by
// WriteSchemaRequest.Validate if the designated constraints aren't met.
type WriteSchemaRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WriteSchemaRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WriteSchemaRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WriteSchemaRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WriteSchemaRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WriteSchemaRequestValidationError) ErrorName() string {
	return "WriteSchemaRequestValidationError"
}

// Error satisfies the builtin error interface
func (e WriteSchemaRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWriteSchemaRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WriteSchemaRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WriteSchemaRequestValidationError{}

// Validate checks the field values on WriteSchemaResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WriteSchemaResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WriteSchemaResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WriteSchemaResponseMultiError, or nil if none found.
func (m *WriteSchemaResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *WriteSchemaResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return WriteSchemaResponseMultiError(errors)
	}

	return nil
}

// WriteSchemaResponseMultiError is an error wrapping multiple validation
// errors returned by WriteSchemaResponse.ValidateAll() if the designated
// constraints aren't met.
type WriteSchemaResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WriteSchemaResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WriteSchemaResponseMultiError) AllErrors() []error { return m }

// WriteSchemaResponseValidationError is the validation error returned by
// WriteSchemaResponse.Validate if the designated constraints aren't met.
type WriteSchemaResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WriteSchemaResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WriteSchemaResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WriteSchemaResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WriteSchemaResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WriteSchemaResponseValidationError) ErrorName() string {
	return "WriteSchemaResponseValidationError"
}

// Error satisfies the builtin error interface
func (e WriteSchemaResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWriteSchemaResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WriteSchemaResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WriteSchemaResponseValidationError{}

// Validate checks the field values on GetSchemaRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetSchemaRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSchemaRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSchemaRequestMultiError, or nil if none found.
func (m *GetSchemaRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSchemaRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetSchemaRequestMultiError(errors)
	}

	return nil
}

// GetSchemaRequestMultiError is an error wrapping multiple validation errors
// returned by GetSchemaRequest.ValidateAll() if the designated constraints
// aren't met.
type GetSchemaRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSchemaRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSchemaRequestMultiError) AllErrors() []error { return m }

// GetSchemaRequestValidationError is the validation error returned by
// GetSchemaRequest.Validate if the designated constraints aren't met.
type GetSchemaRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSchemaRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSchemaRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSchemaRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSchemaRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSchemaRequestValidationError) ErrorName() string { return "GetSchemaRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetSchemaRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSchemaRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSchemaRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSchemaRequestValidationError{}

// Validate checks the field values on GetSchemaResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetSchemaResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSchemaResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSchemaResponseMultiError, or nil if none found.
func (m *GetSchemaResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSchemaResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetConfigs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetSchemaResponseValidationError{
						field:  fmt.Sprintf("Configs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetSchemaResponseValidationError{
						field:  fmt.Sprintf("Configs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetSchemaResponseValidationError{
					field:  fmt.Sprintf("Configs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetSchemaResponseMultiError(errors)
	}

	return nil
}

// GetSchemaResponseMultiError is an error wrapping multiple validation errors
// returned by GetSchemaResponse.ValidateAll() if the designated constraints
// aren't met.
type GetSchemaResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSchemaResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSchemaResponseMultiError) AllErrors() []error { return m }

// GetSchemaResponseValidationError is the validation error returned by
// GetSchemaResponse.Validate if the designated constraints aren't met.
type GetSchemaResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSchemaResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSchemaResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSchemaResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSchemaResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSchemaResponseValidationError) ErrorName() string {
	return "GetSchemaResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetSchemaResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSchemaResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSchemaResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSchemaResponseValidationError{}

// Validate checks the field values on DeleteSchemaRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteSchemaRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteSchemaRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteSchemaRequestMultiError, or nil if none found.
func (m *DeleteSchemaRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteSchemaRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteSchemaRequestMultiError(errors)
	}

	return nil
}

// DeleteSchemaRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteSchemaRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteSchemaRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteSchemaRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteSchemaRequestMultiError) AllErrors() []error { return m }

// DeleteSchemaRequestValidationError is the validation error returned by
// DeleteSchemaRequest.Validate if the designated constraints aren't met.
type DeleteSchemaRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteSchemaRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteSchemaRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteSchemaRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteSchemaRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteSchemaRequestValidationError) ErrorName() string {
	return "DeleteSchemaRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteSchemaRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteSchemaRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteSchemaRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteSchemaRequestValidationError{}

// Validate checks the field values on DeleteSchemaResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteSchemaResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteSchemaResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteSchemaResponseMultiError, or nil if none found.
func (m *DeleteSchemaResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteSchemaResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteSchemaResponseMultiError(errors)
	}

	return nil
}

// DeleteSchemaResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteSchemaResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteSchemaResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteSchemaResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteSchemaResponseMultiError) AllErrors() []error { return m }

// DeleteSchemaResponseValidationError is the validation error returned by
// DeleteSchemaResponse.Validate if the designated constraints aren't met.
type DeleteSchemaResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteSchemaResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteSchemaResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteSchemaResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteSchemaResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteSchemaResponseValidationError) ErrorName() string {
	return "DeleteSchemaResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteSchemaResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteSchemaResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteSchemaResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteSchemaResponseValidationError{}

// Validate checks the field values on WriteTuplesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WriteTuplesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WriteTuplesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WriteTuplesRequestMultiError, or nil if none found.
func (m *WriteTuplesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *WriteTuplesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTuples() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, WriteTuplesRequestValidationError{
						field:  fmt.Sprintf("Tuples[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, WriteTuplesRequestValidationError{
						field:  fmt.Sprintf("Tuples[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WriteTuplesRequestValidationError{
					field:  fmt.Sprintf("Tuples[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return WriteTuplesRequestMultiError(errors)
	}

	return nil
}

// WriteTuplesRequestMultiError is an error wrapping multiple validation errors
// returned by WriteTuplesRequest.ValidateAll() if the designated constraints
// aren't met.
type WriteTuplesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WriteTuplesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WriteTuplesRequestMultiError) AllErrors() []error { return m }

// WriteTuplesRequestValidationError is the validation error returned by
// WriteTuplesRequest.Validate if the designated constraints aren't met.
type WriteTuplesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WriteTuplesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WriteTuplesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WriteTuplesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WriteTuplesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WriteTuplesRequestValidationError) ErrorName() string {
	return "WriteTuplesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e WriteTuplesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWriteTuplesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WriteTuplesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WriteTuplesRequestValidationError{}

// Validate checks the field values on WriteTuplesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WriteTuplesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WriteTuplesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WriteTuplesResponseMultiError, or nil if none found.
func (m *WriteTuplesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *WriteTuplesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return WriteTuplesResponseMultiError(errors)
	}

	return nil
}

// WriteTuplesResponseMultiError is an error wrapping multiple validation
// errors returned by WriteTuplesResponse.ValidateAll() if the designated
// constraints aren't met.
type WriteTuplesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WriteTuplesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WriteTuplesResponseMultiError) AllErrors() []error { return m }

// WriteTuplesResponseValidationError is the validation error returned by
// WriteTuplesResponse.Validate if the designated constraints aren't met.
type WriteTuplesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WriteTuplesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WriteTuplesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WriteTuplesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WriteTuplesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WriteTuplesResponseValidationError) ErrorName() string {
	return "WriteTuplesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e WriteTuplesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWriteTuplesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WriteTuplesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WriteTuplesResponseValidationError{}

// Validate checks the field values on GetTuplesRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetTuplesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTuplesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTuplesRequestMultiError, or nil if none found.
func (m *GetTuplesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTuplesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetTuplesRequestMultiError(errors)
	}

	return nil
}

// GetTuplesRequestMultiError is an error wrapping multiple validation errors
// returned by GetTuplesRequest.ValidateAll() if the designated constraints
// aren't met.
type GetTuplesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTuplesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTuplesRequestMultiError) AllErrors() []error { return m }

// GetTuplesRequestValidationError is the validation error returned by
// GetTuplesRequest.Validate if the designated constraints aren't met.
type GetTuplesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTuplesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTuplesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTuplesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTuplesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTuplesRequestValidationError) ErrorName() string { return "GetTuplesRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetTuplesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTuplesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTuplesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTuplesRequestValidationError{}

// Validate checks the field values on GetTuplesResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetTuplesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTuplesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTuplesResponseMultiError, or nil if none found.
func (m *GetTuplesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTuplesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTuples() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetTuplesResponseValidationError{
						field:  fmt.Sprintf("Tuples[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetTuplesResponseValidationError{
						field:  fmt.Sprintf("Tuples[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetTuplesResponseValidationError{
					field:  fmt.Sprintf("Tuples[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetTuplesResponseMultiError(errors)
	}

	return nil
}

// GetTuplesResponseMultiError is an error wrapping multiple validation errors
// returned by GetTuplesResponse.ValidateAll() if the designated constraints
// aren't met.
type GetTuplesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTuplesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTuplesResponseMultiError) AllErrors() []error { return m }

// GetTuplesResponseValidationError is the validation error returned by
// GetTuplesResponse.Validate if the designated constraints aren't met.
type GetTuplesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTuplesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTuplesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTuplesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTuplesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTuplesResponseValidationError) ErrorName() string {
	return "GetTuplesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetTuplesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTuplesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTuplesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTuplesResponseValidationError{}

// Validate checks the field values on DeleteTuplesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteTuplesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTuplesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteTuplesRequestMultiError, or nil if none found.
func (m *DeleteTuplesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTuplesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTuples() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DeleteTuplesRequestValidationError{
						field:  fmt.Sprintf("Tuples[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DeleteTuplesRequestValidationError{
						field:  fmt.Sprintf("Tuples[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DeleteTuplesRequestValidationError{
					field:  fmt.Sprintf("Tuples[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DeleteTuplesRequestMultiError(errors)
	}

	return nil
}

// DeleteTuplesRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteTuplesRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteTuplesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTuplesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTuplesRequestMultiError) AllErrors() []error { return m }

// DeleteTuplesRequestValidationError is the validation error returned by
// DeleteTuplesRequest.Validate if the designated constraints aren't met.
type DeleteTuplesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTuplesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTuplesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTuplesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTuplesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTuplesRequestValidationError) ErrorName() string {
	return "DeleteTuplesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTuplesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTuplesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTuplesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTuplesRequestValidationError{}

// Validate checks the field values on DeleteTuplesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteTuplesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTuplesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteTuplesResponseMultiError, or nil if none found.
func (m *DeleteTuplesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTuplesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteTuplesResponseMultiError(errors)
	}

	return nil
}

// DeleteTuplesResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteTuplesResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteTuplesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTuplesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTuplesResponseMultiError) AllErrors() []error { return m }

// DeleteTuplesResponseValidationError is the validation error returned by
// DeleteTuplesResponse.Validate if the designated constraints aren't met.
type DeleteTuplesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTuplesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTuplesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTuplesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTuplesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTuplesResponseValidationError) ErrorName() string {
	return "DeleteTuplesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTuplesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTuplesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTuplesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTuplesResponseValidationError{}

// Validate checks the field values on CheckRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CheckRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CheckRequestMultiError, or
// nil if none found.
func (m *CheckRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetNamespace()) > 256 {
		err := CheckRequestValidationError{
			field:  "Namespace",
			reason: "value length must be at most 256 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_CheckRequest_Namespace_Pattern.MatchString(m.GetNamespace()) {
		err := CheckRequestValidationError{
			field:  "Namespace",
			reason: "value does not match regex pattern \"^[a-z][-_a-zA-Z0-9]*$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetId()) > 256 {
		err := CheckRequestValidationError{
			field:  "Id",
			reason: "value length must be at most 256 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_CheckRequest_Id_Pattern.MatchString(m.GetId()) {
		err := CheckRequestValidationError{
			field:  "Id",
			reason: "value does not match regex pattern \"^[a-z0-9][-_a-zA-Z0-9]*$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetRelation()) > 256 {
		err := CheckRequestValidationError{
			field:  "Relation",
			reason: "value length must be at most 256 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_CheckRequest_Relation_Pattern.MatchString(m.GetRelation()) {
		err := CheckRequestValidationError{
			field:  "Relation",
			reason: "value does not match regex pattern \"^[a-z][-_a-zA-Z0-9]*$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetUser()) > 512 {
		err := CheckRequestValidationError{
			field:  "User",
			reason: "value length must be at most 512 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_CheckRequest_User_Pattern.MatchString(m.GetUser()) {
		err := CheckRequestValidationError{
			field:  "User",
			reason: "value does not match regex pattern \"^[a-z][-_a-zA-Z0-9(), ]*$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CheckRequestMultiError(errors)
	}

	return nil
}

// CheckRequestMultiError is an error wrapping multiple validation errors
// returned by CheckRequest.ValidateAll() if the designated constraints aren't met.
type CheckRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckRequestMultiError) AllErrors() []error { return m }

// CheckRequestValidationError is the validation error returned by
// CheckRequest.Validate if the designated constraints aren't met.
type CheckRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckRequestValidationError) ErrorName() string { return "CheckRequestValidationError" }

// Error satisfies the builtin error interface
func (e CheckRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckRequestValidationError{}

var _CheckRequest_Namespace_Pattern = regexp.MustCompile("^[a-z][-_a-zA-Z0-9]*$")

var _CheckRequest_Id_Pattern = regexp.MustCompile("^[a-z0-9][-_a-zA-Z0-9]*$")

var _CheckRequest_Relation_Pattern = regexp.MustCompile("^[a-z][-_a-zA-Z0-9]*$")

var _CheckRequest_User_Pattern = regexp.MustCompile("^[a-z][-_a-zA-Z0-9(), ]*$")

// Validate checks the field values on CheckResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CheckResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CheckResponseMultiError, or
// nil if none found.
func (m *CheckResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Allowed

	if len(errors) > 0 {
		return CheckResponseMultiError(errors)
	}

	return nil
}

// CheckResponseMultiError is an error wrapping multiple validation errors
// returned by CheckResponse.ValidateAll() if the designated constraints
// aren't met.
type CheckResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckResponseMultiError) AllErrors() []error { return m }

// CheckResponseValidationError is the validation error returned by
// CheckResponse.Validate if the designated constraints aren't met.
type CheckResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckResponseValidationError) ErrorName() string { return "CheckResponseValidationError" }

// Error satisfies the builtin error interface
func (e CheckResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckResponseValidationError{}

// Validate checks the field values on ListObjectsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListObjectsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListObjectsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListObjectsRequestMultiError, or nil if none found.
func (m *ListObjectsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListObjectsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetNamespace()) > 256 {
		err := ListObjectsRequestValidationError{
			field:  "Namespace",
			reason: "value length must be at most 256 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ListObjectsRequest_Namespace_Pattern.MatchString(m.GetNamespace()) {
		err := ListObjectsRequestValidationError{
			field:  "Namespace",
			reason: "value does not match regex pattern \"^[a-z][-_a-zA-Z0-9]*$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetRelation()) > 256 {
		err := ListObjectsRequestValidationError{
			field:  "Relation",
			reason: "value length must be at most 256 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ListObjectsRequest_Relation_Pattern.MatchString(m.GetRelation()) {
		err := ListObjectsRequestValidationError{
			field:  "Relation",
			reason: "value does not match regex pattern \"^[a-z][-_a-zA-Z0-9]*$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetUser()) > 512 {
		err := ListObjectsRequestValidationError{
			field:  "User",
			reason: "value length must be at most 512 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ListObjectsRequest_User_Pattern.MatchString(m.GetUser()) {
		err := ListObjectsRequestValidationError{
			field:  "User",
			reason: "value does not match regex pattern \"^[a-z][-_a-zA-Z0-9(), ]*$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListObjectsRequestMultiError(errors)
	}

	return nil
}

// ListObjectsRequestMultiError is an error wrapping multiple validation errors
// returned by ListObjectsRequest.ValidateAll() if the designated constraints
// aren't met.
type ListObjectsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListObjectsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListObjectsRequestMultiError) AllErrors() []error { return m }

// ListObjectsRequestValidationError is the validation error returned by
// ListObjectsRequest.Validate if the designated constraints aren't met.
type ListObjectsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListObjectsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListObjectsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListObjectsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListObjectsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListObjectsRequestValidationError) ErrorName() string {
	return "ListObjectsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListObjectsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListObjectsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListObjectsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListObjectsRequestValidationError{}

var _ListObjectsRequest_Namespace_Pattern = regexp.MustCompile("^[a-z][-_a-zA-Z0-9]*$")

var _ListObjectsRequest_Relation_Pattern = regexp.MustCompile("^[a-z][-_a-zA-Z0-9]*$")

var _ListObjectsRequest_User_Pattern = regexp.MustCompile("^[a-z][-_a-zA-Z0-9(), ]*$")

// Validate checks the field values on ListObjectsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListObjectsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListObjectsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListObjectsResponseMultiError, or nil if none found.
func (m *ListObjectsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListObjectsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListObjectsResponseMultiError(errors)
	}

	return nil
}

// ListObjectsResponseMultiError is an error wrapping multiple validation
// errors returned by ListObjectsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListObjectsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListObjectsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListObjectsResponseMultiError) AllErrors() []error { return m }

// ListObjectsResponseValidationError is the validation error returned by
// ListObjectsResponse.Validate if the designated constraints aren't met.
type ListObjectsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListObjectsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListObjectsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListObjectsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListObjectsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListObjectsResponseValidationError) ErrorName() string {
	return "ListObjectsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListObjectsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListObjectsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListObjectsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListObjectsResponseValidationError{}
